import java.sql.*;
import java.util.Scanner;

public class ProductCRUD {
    private static final String URL = "jdbc:mysql://localhost:3306/your_database";
    private static final String USER = "your_username";
    private static final String PASSWORD = "your_password";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Connection connection = null;

        try {
            // Connect to the database
            connection = DriverManager.getConnection(URL, USER, PASSWORD);
            connection.setAutoCommit(false); // Start a transaction

            // Display menu and handle user choice
            while (true) {
                System.out.println("\nMenu:");
                System.out.println("1. Create Product");
                System.out.println("2. Read Product");
                System.out.println("3. Update Product");
                System.out.println("4. Delete Product");
                System.out.println("5. Exit");
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline character

                switch (choice) {
                    case 1:
                        createProduct(scanner, connection);
                        break;
                    case 2:
                        readProduct(scanner, connection);
                        break;
                    case 3:
                        updateProduct(scanner, connection);
                        break;
                    case 4:
                        deleteProduct(scanner, connection);
                        break;
                    case 5:
                        connection.commit(); // Commit transaction before exiting
                        System.out.println("Exiting program...");
                        return;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            }

        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
            try {
                if (connection != null) {
                    connection.rollback(); // Rollback the transaction on error
                }
            } catch (SQLException se) {
                System.out.println("Rollback failed: " + se.getMessage());
            }
        } finally {
            try {
                if (connection != null) {
                    connection.close(); // Close the connection
                }
            } catch (SQLException se) {
                System.out.println("Error closing connection: " + se.getMessage());
            }
        }
    }

    // Create a new product
    private static void createProduct(Scanner scanner, Connection connection) {
        try {
            System.out.print("Enter Product ID: ");
            int productId = scanner.nextInt();
            scanner.nextLine(); // Consume newline character
            System.out.print("Enter Product Name: ");
            String productName = scanner.nextLine();
            System.out.print("Enter Price: ");
            double price = scanner.nextDouble();
            System.out.print("Enter Quantity: ");
            int quantity = scanner.nextInt();

            String query = "INSERT INTO Product (ProductID, ProductName, Price, Quantity) VALUES (?, ?, ?, ?)";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, productId);
                statement.setString(2, productName);
                statement.setDouble(3, price);
                statement.setInt(4, quantity);

                int rowsInserted = statement.executeUpdate();
                if (rowsInserted > 0) {
                    System.out.println("Product created successfully!");
                    connection.commit(); // Commit transaction
                }
            }
        } catch (SQLException e) {
            System.out.println("Error creating product: " + e.getMessage());
            try {
                connection.rollback(); // Rollback the transaction on error
            } catch (SQLException se) {
                System.out.println("Rollback failed: " + se.getMessage());
            }
        }
    }

    // Read a product by ProductID
    private static void readProduct(Scanner scanner, Connection connection) {
        try {
            System.out.print("Enter Product ID to read: ");
            int productId = scanner.nextInt();

            String query = "SELECT * FROM Product WHERE ProductID = ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, productId);
                ResultSet resultSet = statement.executeQuery();

                if (resultSet.next()) {
                    System.out.println("ProductID: " + resultSet.getInt("ProductID"));
                    System.out.println("ProductName: " + resultSet.getString("ProductName"));
                    System.out.println("Price: " + resultSet.getDouble("Price"));
                    System.out.println("Quantity: " + resultSet.getInt("Quantity"));
                } else {
                    System.out.println("Product not found.");
                }
            }
        } catch (SQLException e) {
            System.out.println("Error reading product: " + e.getMessage());
        }
    }

    // Update a product by ProductID
    private static void updateProduct(Scanner scanner, Connection connection) {
        try {
            System.out.print("Enter Product ID to update: ");
            int productId = scanner.nextInt();
            scanner.nextLine(); // Consume newline character

            System.out.print("Enter new Product Name: ");
            String productName = scanner.nextLine();
            System.out.print("Enter new Price: ");
            double price = scanner.nextDouble();
            System.out.print("Enter new Quantity: ");
            int quantity = scanner.nextInt();

            String query = "UPDATE Product SET ProductName = ?, Price = ?, Quantity = ? WHERE ProductID = ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setString(1, productName);
                statement.setDouble(2, price);
                statement.setInt(3, quantity);
                statement.setInt(4, productId);

                int rowsUpdated = statement.executeUpdate();
                if (rowsUpdated > 0) {
                    System.out.println("Product updated successfully!");
                    connection.commit(); // Commit transaction
                } else {
                    System.out.println("Product not found.");
                }
            }
        } catch (SQLException e) {
            System.out.println("Error updating product: " + e.getMessage());
            try {
                connection.rollback(); // Rollback the transaction on error
            } catch (SQLException se) {
                System.out.println("Rollback failed: " + se.getMessage());
            }
        }
    }

    // Delete a product by ProductID
    private static void deleteProduct(Scanner scanner, Connection connection) {
        try {
            System.out.print("Enter Product ID to delete: ");
            int productId = scanner.nextInt();

            String query = "DELETE FROM Product WHERE ProductID = ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, productId);

                int rowsDeleted = statement.executeUpdate();
                if (rowsDeleted > 0) {
                    System.out.println("Product deleted successfully!");
                    connection.commit(); // Commit transaction
                } else {
                    System.out.println("Product not found.");
                }
            }
        } catch (SQLException e) {
            System.out.println("Error deleting product: " + e.getMessage());
            try {
                connection.rollback(); // Rollback the transaction on error
            } catch (SQLException se) {
                System.out.println("Rollback failed: " + se.getMessage());
            }
        }
    }
}
